// File name: Decode.hdl

/**
 * The instruction decoder determines the type of instruction (a or c)
 * and decodes those instructions.
 * The input in[16] is the instruction to be decoded.
 * The outputs are used as follows:
 *   type:      0 if a-instruction, 1 if c-instruction. 
 *   a:         Determines whether the ALU input uses A (0) or Memory[A] (1)
 *   c1 .. c6:  Op-code wires to ALU
 *   d1 d2 d3:  Destination wires to the load pins of A,D registers and Memory
 *   j1 j2 j3:  Jump wires to Jump Unit
 * For a-instructions, d1 should be 1, all other outputs should be 0
 * For c-instructions, outputs should correspond to their bits in the c-instruction
 */

CHIP Decode {

    IN  in[16];             // instruction to decode

    OUT type,               // Instruction type
        a,                  // ALU A/M
        c1,c2,c3,c4,c5,c6,  // Op-code wires to ALU
        d1,d2,d3,           // Destination wires
        j1,j2,j3;           // Jump wires

PARTS:
    Or(in[15], false, type);

    Not(in[15], notType);

    And(notType, true, d1);
    And(notType, false, d2);
    And(notType, false, d3);
    And(notType, false, a);
    And(notType, false, c1);
    And(notType, false, c2);
    And(notType, false, c3);
    And(notType, false, c4);
    And(notType, false, c5);
    And(notType, false, c6);
    And(notType, false, j1);
    And(notType, false, j2);
    And(notType, false, j3);

    And(type, in[12], a);
    And(type, in[11], c1);
    And(type, in[10], c2);
    And(type, in[9],  c3);
    And(type, in[8],  c4);
    And(type, in[7],  c5);
    And(type, in[6],  c6);

    And(type, in[5], d1);
    And(type, in[4], d2);
    And(type, in[3], d3);

    And(type, in[2], j1);
    And(type, in[1], j2);
    And(type, in[0], j3);
}

